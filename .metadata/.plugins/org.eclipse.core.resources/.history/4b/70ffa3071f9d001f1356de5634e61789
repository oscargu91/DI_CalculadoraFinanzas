package com.carballeira.controller;

import com.carballeira.view.FinanceEntry;
import javafx.collections.ObservableList;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.RadioButton;
import javafx.scene.control.TextField;
import javafx.scene.layout.VBox;

public class FinanceController {

    private final ObservableList<FinanceEntry> financeData;
    private final VBox pieChartContainer;

    public FinanceController(ObservableList<FinanceEntry> financeData, VBox pieChartContainer) {
        this.financeData = financeData;
        this.pieChartContainer = pieChartContainer;
    }

    public void agregarEntrada(String entryName, String entryAmountStr, RadioButton gasto, RadioButton ingreso, TextField nombre, TextField cantidad, Label resultadoMeta) {
        String entryType = gasto.isSelected() ? "Gasto" : ingreso.isSelected() ? "Ingreso" : null;

        try {
            // Llamamos a la validación en el modelo FinanceEntry
            FinanceEntry.validarEntrada(entryName, entryAmountStr, entryType);
            Double entryAmount = Double.parseDouble(entryAmountStr);
            Button deleteButton = crearBotonEliminar(entryName, entryAmount);

            // Si es válida, añadimos la nueva entrada financiera
            financeData.add(new FinanceEntry(entryName, entryAmount, entryType, deleteButton));
            actualizarBalanceYGrafico();

            // Limpiamos los campos en la vista después de añadir la entrada
            nombre.clear();
            cantidad.clear();
            gasto.setSelected(false);
            ingreso.setSelected(false);
        } catch (IllegalArgumentException e) {
            // Mostramos mensaje de error en caso de datos inválidos
            resultadoMeta.setText(e.getMessage());
        }
    }

    private Button crearBotonEliminar(String entryName, double entryAmount) {
        Button deleteButton = new Button("Eliminar");
        deleteButton.setOnAction(event -> {
            financeData.removeIf(entry -> entry.getName().equals(entryName) && entry.getAmount() == entryAmount);
            actualizarBalanceYGrafico();
        });
        return deleteButton;
    }

    private void actualizarBalanceYGrafico() {
        // Calculamos ingresos y gastos
        double totalIngresos = financeData.stream().filter(e -> e.getType().equals("Ingreso")).mapToDouble(FinanceEntry::getAmount).sum();
        double totalGastos = financeData.stream().filter(e -> e.getType().equals("Gasto")).mapToDouble(FinanceEntry::getAmount).sum();
        double balance = totalIngresos - totalGastos;

        // Actualizamos el gráfico de pastel
        if (!pieChartContainer.isVisible()) {
            PieChart pieChart = crearPieChart(totalIngresos, totalGastos, balance);
            pieChartContainer.getChildren().add(pieChart);
            pieChartContainer.setVisible(true);
        } else {
            PieChart pieChart = (PieChart) pieChartContainer.getChildren().get(0);
            actualizarDatosPieChart(pieChart, totalIngresos, totalGastos, balance);
        }
    }

    private PieChart crearPieChart(double totalIngresos, double totalGastos, double balance) {
        ObservableList<PieChart.Data> pieChartData = FXCollections.observableArrayList(
                new PieChart.Data("Ingresos: " + totalIngresos + " €", totalIngresos),
                new PieChart.Data("Gastos: " + totalGastos + " €", totalGastos),
                new PieChart.Data("Balance: " + balance + " €", Math.abs(balance))
        );
        PieChart pieChart = new PieChart(pieChartData);
        pieChart.setTitle("Distribución Financiera");
        pieChart.setLegendVisible(false);
        setBalanceColor(pieChartData.get(2), balance);
        return pieChart;
    }

    private void actualizarDatosPieChart(PieChart pieChart, double totalIngresos, double totalGastos, double balance) {
        pieChart.getData().set(0, new PieChart.Data("Ingresos: " + totalIngresos + " €", totalIngresos));
        pieChart.getData().set(1, new PieChart.Data("Gastos: " + totalGastos + " €", totalGastos));
        pieChart.getData().set(2, new PieChart.Data("Balance: " + balance + " €", Math.abs(balance)));
        setBalanceColor(pieChart.getData().get(2), balance);
    }

    private void setBalanceColor(PieChart.Data data, double balance) {
        if (balance >= 0) {
            data.getNode().setStyle("-fx-pie-color: #66BB6A;");
        } else {
            data.getNode().setStyle("-fx-pie-color: #EF5350;");
        }
    }
}
