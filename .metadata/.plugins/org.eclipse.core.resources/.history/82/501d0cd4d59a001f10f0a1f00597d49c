package application;

import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.Scene;
import javafx.scene.chart.PieChart;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.*;
import javafx.stage.Modality;
import javafx.stage.Stage;

public class Main extends Application {

    private double totalIngresos = 0;
    private double totalGastos = 0;

    @Override
    public void start(Stage primaryStage) {
        try {
            // Ventana inicial
            BorderPane mainRoot = new BorderPane();
            Button iniciarSesion = new Button("Iniciar Sesión");
            Button salir = new Button("Salir");

            iniciarSesion.setOnAction(event -> openLoginWindow(primaryStage));
            salir.setOnAction(event -> primaryStage.close());

            HBox inicioLayout = new HBox(20);
            inicioLayout.getChildren().addAll(iniciarSesion, salir);
            inicioLayout.setAlignment(javafx.geometry.Pos.CENTER);

            mainRoot.setCenter(inicioLayout);

            // Crear la escena
            Scene mainScene = new Scene(mainRoot, 400, 200);
            primaryStage.setScene(mainScene);
            primaryStage.setTitle("Bienvenido"); // Título de la ventana
            primaryStage.show();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void openLoginWindow(Stage owner) {
        Stage loginStage = new Stage();
        loginStage.initModality(Modality.APPLICATION_MODAL);
        loginStage.initOwner(owner);

        GridPane loginLayout = new GridPane();
        loginLayout.setVgap(10);
        loginLayout.setHgap(10);

        Label usuarioLabel = new Label("Usuario:");
        TextField usuarioField = new TextField();
        Label contrasenaLabel = new Label("Contraseña:");
        PasswordField contrasenaField = new PasswordField();
        Button aceptar = new Button("Aceptar");
        Button cancelar = new Button("Cancelar");

        aceptar.setOnAction(event -> {
            String usuario = usuarioField.getText();
            String contrasena = contrasenaField.getText();
            if (!usuario.isEmpty() && !contrasena.isEmpty()) {
                loginStage.close();
                startFinanceCalculator();
            } else {
                Alert alert = new Alert(Alert.AlertType.ERROR, "Por favor, complete ambos campos.", ButtonType.OK);
                alert.showAndWait();
            }
        });

        cancelar.setOnAction(event -> loginStage.close());

        loginLayout.add(usuarioLabel, 0, 0);
        loginLayout.add(usuarioField, 1, 0);
        loginLayout.add(contrasenaLabel, 0, 1);
        loginLayout.add(contrasenaField, 1, 1);
        loginLayout.add(aceptar, 0, 2);
        loginLayout.add(cancelar, 1, 2);

        Scene loginScene = new Scene(loginLayout, 300, 200);
        loginStage.setScene(loginScene);
        loginStage.setTitle("Iniciar Sesión");
        loginStage.showAndWait();
    }

    private void startFinanceCalculator() {
        Stage primaryStage = new Stage();
        try {
            BorderPane root = new BorderPane();

            // Parte superior: formulario
            GridPane formulario = new GridPane();
            formulario.setVgap(10);
            formulario.setHgap(10);

            Label titulo = new Label("Calculadora de finanzas");
            TextField nombre = new TextField();
            nombre.setPromptText("Nombre del gasto/ingreso");
            TextField cantidad = new TextField();
            cantidad.setPromptText("Cantidad");
            TextField meta = new TextField();
            meta.setPromptText("Meta financiera");
            Label metaLabel = new Label(); // Label para mostrar la comparación con la meta

            ToggleGroup botones = new ToggleGroup();
            RadioButton gasto = new RadioButton("Gasto");
            RadioButton ingreso = new RadioButton("Ingreso");
            gasto.setToggleGroup(botones);
            ingreso.setToggleGroup(botones);

            Button calcular = new Button("Calcular");
            Button agregar = new Button("Agregar");

            formulario.add(titulo, 0, 0, 4, 1);
            formulario.add(nombre, 0, 1);
            formulario.add(cantidad, 1, 1);
            formulario.add(gasto, 2, 1);
            formulario.add(ingreso, 3, 1);
            formulario.add(meta, 0, 2);
            formulario.add(agregar, 1, 2);
            formulario.add(metaLabel, 0, 3, 4, 1); // Agregar el label de meta

            // Tabla para mostrar los datos
            TableView<FinanceEntry> table = new TableView<>();
            TableColumn<FinanceEntry, String> nameColumn = new TableColumn<>("Nombre");
            nameColumn.setCellValueFactory(new PropertyValueFactory<>("name"));

            TableColumn<FinanceEntry, Double> amountColumn = new TableColumn<>("Cantidad");
            amountColumn.setCellValueFactory(new PropertyValueFactory<>("amount"));

            TableColumn<FinanceEntry, String> typeColumn = new TableColumn<>("Tipo");
            typeColumn.setCellValueFactory(new PropertyValueFactory<>("type"));

            table.getColumns().addAll(nameColumn, amountColumn, typeColumn);

            // Lista observable para la tabla
            ObservableList<FinanceEntry> financeData = FXCollections.observableArrayList();
            table.setItems(financeData);

            // Campo para mostrar totales
            Label totalLabel = new Label("Total Ingresos: 0 € \n Total Gastos: 0 € \n Balance: 0 €");
            totalLabel.setStyle("-fx-font-weight: bold;");

            // Crear un contenedor para el PieChart
            VBox pieChartContainer = new VBox();
            pieChartContainer.setVisible(false); // Inicialmente invisible

            // Añadir funcionalidad al botón "Agregar"
            agregar.setOnAction(event -> {
                String entryName = nombre.getText();
                Double entryAmount = Double.parseDouble(cantidad.getText());
                String entryType = gasto.isSelected() ? "Gasto" : "Ingreso";

                // Agregar la nueva entrada a la lista de finanzas
                financeData.add(new FinanceEntry(entryName, entryAmount, entryType));

                // Calcular los totales de ingresos y gastos
                totalIngresos = 0;
                totalGastos = 0;

                for (FinanceEntry entry : financeData) {
                    if (entry.getType().equals("Ingreso")) {
                        totalIngresos += entry.getAmount();
                    } else if (entry.getType().equals("Gasto")) {
                        totalGastos += entry.getAmount();
                    }
                }

                // Calcular el balance
                double balance = totalIngresos - totalGastos;

                // Actualizar el label de totales
                totalLabel.setText("Total Ingresos: " + totalIngresos + " € | Total Gastos: " + totalGastos + " € | Balance: " + balance + " €");

                // Comparar meta
                double metaValue = meta.getText().isEmpty() ? 0 : Double.parseDouble(meta.getText());
                if (metaValue > balance) {
                    metaLabel.setText("Te faltan " + (metaValue - balance) + " para alcanzar la meta.");
                } else {
                    metaLabel.setText("La meta ha sido alcanzada, te sobra " + (balance - metaValue) + " €.");
                }

                // Crear el PieChart solo si hay entradas
                if (!pieChartContainer.isVisible()) {
                    createPieChart(pieChartContainer, totalIngresos, totalGastos, balance);
                } else {
                    // Actualizar los datos del PieChart si ya existe
                    updatePieChart(pieChartContainer, totalIngresos, totalGastos, balance);
                }

                // Limpiar los campos después de agregar
                nombre.clear();
                cantidad.clear();
                botones.selectToggle(null);
            });

            // Organizar los elementos en un HBox
            HBox contenidoInferior = new HBox();
            contenidoInferior.setSpacing(20);
            VBox tableAndChart = new VBox(table, totalLabel); // VBox para la tabla y el label
            HBox.setHgrow(tableAndChart, Priority.ALWAYS);
            pieChartContainer.setMinWidth(400);
            contenidoInferior.getChildren().addAll(tableAndChart, pieChartContainer);

            // Añadir los componentes al BorderPane
            root.setTop(formulario);
            root.setCenter(new Separator());
            root.setBottom(contenidoInferior);

            // Crear la escena
            Scene scene = new Scene(root, 1000, 800);
            scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
            primaryStage.setScene(scene);
            primaryStage.setTitle("Calculadora de Finanzas"); // Título de la ventana
            primaryStage.show();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void createPieChart(VBox pieChartContainer, double totalIngresos, double totalGastos, double balance) {
        ObservableList<PieChart.Data> pieChartData = FXCollections.observableArrayList(
                new PieChart.Data("Ingresos: " + totalIngresos + " €", totalIngresos),
                new PieChart.Data("Gastos: " + totalGastos + " €", totalGastos),
                new PieChart.Data("Balance: " + (balance < 0 ? "-" + Math.abs(balance) : balance) + " €", Math.abs(balance))
        );

        // Crear el PieChart
        PieChart pieChart = new PieChart(pieChartData);
        pieChart.setTitle("Distribución Financiera");
        pieChart.setLegendVisible(false);

        // Establecer el color del balance según su valor
        setBalanceColor(pieChartData.get(2), balance); // Establece el color del balance

        pieChartContainer.getChildren().add(pieChart);
        pieChartContainer.setVisible(true); // Hacer visible el contenedor del PieChart
    }

    private void updatePieChart(VBox pieChartContainer, double totalIngresos, double totalGastos, double balance) {
        PieChart pieChart = (PieChart) pieChartContainer.getChildren().get(0);
        pieChart.getData().set(0, new PieChart.Data("Ingresos: " + totalIngresos + " €", totalIngresos));
        pieChart.getData().set(1, new PieChart.Data("Gastos: " + totalGastos + " €", totalGastos));
        pieChart.getData().set(2, new PieChart.Data("Balance: " + (balance < 0 ? "-" + Math.abs(balance) : balance) + " €", Math.abs(balance)));

        // Establecer el color del balance según su valor
        setBalanceColor(pieChart.getData().get(2), balance); // Establece el color del balance
    }

    // Método para establecer el color del segmento de balance
    private void setBalanceColor(PieChart.Data data, Double balance) {
        data.getNode().setStyle("-fx-pie-color: red;");
        if (balance >= 0) {
            data.getNode().setStyle("-fx-pie-color: green;");
        }
    }

    public static void main(String[] args) {
        launch(args);
    }
}
