    private void startFinanceCalculator() {
        Stage primaryStage = new Stage();
        try {
            BorderPane root = new BorderPane();

            // Parte superior: formulario
            GridPane formulario = new GridPane();
            formulario.setVgap(10);
            formulario.setHgap(10);

            Label titulo = new Label("Calculadora de finanzas");
            TextField nombre = new TextField();
            nombre.setPromptText("Nombre del gasto/ingreso");
            TextField cantidad = new TextField();
            cantidad.setPromptText("Cantidad");
            TextField meta = new TextField();
            meta.setPromptText("Meta financiera");
            Label metaLabel = new Label(); // Label para mostrar la comparación con la meta

            ToggleGroup botones = new ToggleGroup();
            RadioButton gasto = new RadioButton("Gasto");
            RadioButton ingreso = new RadioButton("Ingreso");
            gasto.setToggleGroup(botones);
            ingreso.setToggleGroup(botones);

            Button calcular = new Button("Calcular");
            Button agregar = new Button("Agregar");

            formulario.add(titulo, 0, 0, 4, 1);
            formulario.add(nombre, 0, 1);
            formulario.add(cantidad, 1, 1);
            formulario.add(gasto, 2, 1);
            formulario.add(ingreso, 3, 1);
            formulario.add(meta, 0, 2);
            formulario.add(agregar, 1, 2);
            formulario.add(metaLabel, 0, 3, 4, 1); // Agregar el label de meta

            // Tabla para mostrar los datos
            TableView<FinanceEntry> table = new TableView<>();
            TableColumn<FinanceEntry, String> nameColumn = new TableColumn<>("Nombre");
            nameColumn.setCellValueFactory(new PropertyValueFactory<>("name"));

            TableColumn<FinanceEntry, Double> amountColumn = new TableColumn<>("Cantidad");
            amountColumn.setCellValueFactory(new PropertyValueFactory<>("amount"));

            TableColumn<FinanceEntry, String> typeColumn = new TableColumn<>("Tipo");
            typeColumn.setCellValueFactory(new PropertyValueFactory<>("type"));

            // Asegúrate de que solo se añaden estas tres columnas
            table.getColumns().addAll(nameColumn, amountColumn, typeColumn);

            // Lista observable para la tabla
            ObservableList<FinanceEntry> financeData = FXCollections.observableArrayList();
            table.setItems(financeData);

            // Campo para mostrar totales
            Label totalLabel = new Label("Total Ingresos: 0 € \n Total Gastos: 0 € \n Balance: 0 €");
            totalLabel.setStyle("-fx-font-weight: bold;");

            // Crear un contenedor para el PieChart
            VBox pieChartContainer = new VBox();
            pieChartContainer.setVisible(false); // Inicialmente invisible

            // Añadir funcionalidad al botón "Agregar"
            agregar.setOnAction(event -> {
                String entryName = nombre.getText();
                Double entryAmount = Double.parseDouble(cantidad.getText());
                String entryType = gasto.isSelected() ? "Gasto" : "Ingreso";

                // Agregar la nueva entrada a la lista de finanzas
                financeData.add(new FinanceEntry(entryName, entryAmount, entryType));

                // Calcular los totales de ingresos y gastos
                totalIngresos = 0;
                totalGastos = 0;

                for (FinanceEntry entry : financeData) {
                    if (entry.getType().equals("Ingreso")) {
                        totalIngresos += entry.getAmount();
                    } else if (entry.getType().equals("Gasto")) {
                        totalGastos += entry.getAmount();
                    }
                }

                // Calcular el balance
                double balance = totalIngresos - totalGastos;

                // Actualizar el label de totales
                totalLabel.setText("Total Ingresos: " + totalIngresos + " € | Total Gastos: " + totalGastos + " € | Balance: " + balance + " €");

                // Comparar meta
                double metaValue = meta.getText().isEmpty() ? 0 : Double.parseDouble(meta.getText());
                if (metaValue > balance) {
                    metaLabel.setText("Te faltan " + (metaValue - balance) + " para alcanzar la meta.");
                } else {
                    metaLabel.setText("La meta ha sido alcanzada, te sobra " + (balance - metaValue) + " €.");
                }

                // Crear el PieChart solo si hay entradas
                if (!pieChartContainer.isVisible()) {
                    createPieChart(pieChartContainer, totalIngresos, totalGastos, balance);
                } else {
                    // Actualizar los datos del PieChart si ya existe
                    updatePieChart(pieChartContainer, totalIngresos, totalGastos, balance);
                }

                // Limpiar los campos después de agregar
                nombre.clear();
                cantidad.clear();
                botones.selectToggle(null);
            });

            // Organizar los elementos en un HBox
            HBox contenidoInferior = new HBox();
            contenidoInferior.setSpacing(20);
            VBox tableAndChart = new VBox(table, totalLabel); // VBox para la tabla y el label
            HBox.setHgrow(tableAndChart, Priority.ALWAYS);
            pieChartContainer.setMinWidth(400);
            contenidoInferior.getChildren().addAll(tableAndChart, pieChartContainer);

            // Añadir los componentes al BorderPane
            root.setTop(formulario);
            root.setCenter(new Separator());
            root.setBottom(contenidoInferior);

            // Crear la escena
            Scene scene = new Scene(root, 1000, 800);
            scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
            primaryStage.setScene(scene);
            primaryStage.setTitle("Calculadora de Finanzas"); // Título de la ventana
            primaryStage.show();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
