package application;

import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.Scene;
import javafx.scene.chart.PieChart;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.*;
import javafx.stage.Stage;
import javafx.stage.Modality;
import javafx.geometry.Pos;

public class Main extends Application {

    @Override
    public void start(Stage primaryStage) {
        mostrarPantallaLogin(primaryStage);
    }

    private void mostrarPantallaLogin(Stage primaryStage) {
        Stage loginStage = new Stage();
        loginStage.initModality(Modality.APPLICATION_MODAL);
        loginStage.setTitle("Inicio de Sesión");

        GridPane loginLayout = new GridPane();
        loginLayout.setAlignment(Pos.CENTER);
        loginLayout.setVgap(10);
        loginLayout.setHgap(10);

        Label user = new Label("Usuario: ");
        TextField campoUsuario = new TextField();
        campoUsuario.setPromptText("Ingrese su usuario");

        Label pwd = new Label("Contraseña: ");
        PasswordField campoContrasena = new PasswordField();
        campoContrasena.setPromptText("Ingrese su contraseña");

        Button botonIniciarSesion = new Button("Iniciar Sesión");
        Button botonSalir = new Button("Salir");
        botonSalir.setOnAction(event -> loginStage.close());

        botonIniciarSesion.setOnAction(event -> {
            String usuario = campoUsuario.getText();
            String contrasena = campoContrasena.getText();

            if (!usuario.isEmpty() && !contrasena.isEmpty()) {
                loginStage.close();
                mostrarPantallaPrincipal(primaryStage);
            } else {
                Alert alerta = new Alert(Alert.AlertType.ERROR);
                alerta.setTitle("Error");
                alerta.setHeaderText("Campos vacíos");
                alerta.setContentText("Debe rellenar todos los campos para iniciar sesión.");
                alerta.showAndWait();
            }
        });

        loginLayout.add(user, 0, 0);
        loginLayout.add(campoUsuario, 1, 0);
        loginLayout.add(pwd, 0, 1);
        loginLayout.add(campoContrasena, 1, 1);
        loginLayout.add(botonIniciarSesion, 0, 2);
        loginLayout.add(botonSalir, 1, 2);

        Scene loginScene = new Scene(loginLayout, 600, 300);
        loginScene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
        loginStage.setScene(loginScene);
        loginStage.show();
    }

    private void mostrarPantallaPrincipal(Stage primaryStage) {
        try {
            BorderPane root = new BorderPane();

            GridPane formulario = new GridPane();
            formulario.setVgap(10);
            formulario.setHgap(10);

            Label titulo = new Label("Calculadora de finanzas");
            TextField nombre = new TextField();
            nombre.setPromptText("Nombre del gasto/ingreso");
            TextField cantidad = new TextField();
            cantidad.setPromptText("Cantidad");
            TextField meta = new TextField();
            meta.setPromptText("Meta financiera");

            ToggleGroup botones = new ToggleGroup();
            RadioButton gasto = new RadioButton("Gasto");
            RadioButton ingreso = new RadioButton("Ingreso");
            gasto.setToggleGroup(botones);
            ingreso.setToggleGroup(botones);

            Button calcular = new Button("Calcular");
            Button agregar = new Button("Agregar");

            Label resultadoMeta = new Label();

            formulario.add(titulo, 0, 0, 4, 1);
            formulario.add(nombre, 0, 1);
            formulario.add(cantidad, 1, 1);
            formulario.add(gasto, 2, 1);
            formulario.add(ingreso, 3, 1);
            formulario.add(meta, 0, 2, 1, 2);
            formulario.add(calcular, 1, 2);
            formulario.add(agregar, 4, 1);
            formulario.add(resultadoMeta, 0, 4, 2, 3);

            TableView<FinanceEntry> table = new TableView<>();
            TableColumn<FinanceEntry, String> nameColumn = new TableColumn<>("Nombre");
            nameColumn.setCellValueFactory(new PropertyValueFactory<>("name"));

            TableColumn<FinanceEntry, Double> amountColumn = new TableColumn<>("Cantidad");
            amountColumn.setCellValueFactory(new PropertyValueFactory<>("amount"));

            TableColumn<FinanceEntry, String> typeColumn = new TableColumn<>("Tipo");
            typeColumn.setCellValueFactory(new PropertyValueFactory<>("type"));

            TableColumn<FinanceEntry, Void> actionColumn = new TableColumn<>("Acciones");
            actionColumn.setCellFactory(param -> new TableCell<>() {
                private final Button deleteButton = new Button("Eliminar");

                {
                    deleteButton.setOnAction(event -> {
                        FinanceEntry entry = getTableView().getItems().get(getIndex());
                        table.getItems().remove(entry);
                        actualizarGrafico();
                    });
                }

                @Override
                protected void updateItem(Void item, boolean empty) {
                    super.updateItem(item, empty);
                    if (empty) {
                        setGraphic(null);
                    } else {
                        setGraphic(deleteButton);
                    }
                }
            });

            table.getColumns().addAll(nameColumn, amountColumn, typeColumn, actionColumn);
            ObservableList<FinanceEntry> financeData = FXCollections.observableArrayList();
            table.setItems(financeData);

            VBox pieChartContainer = new VBox();
            pieChartContainer.setVisible(false);

            agregar.setOnAction(event -> {
                String entryName = nombre.getText();
                String entryAmountStr = cantidad.getText();
                String entryType = gasto.isSelected() ? "Gasto" : ingreso.isSelected() ? "Ingreso" : null;

                if (entryName.isEmpty()) {
                    showAlert("Campo Vacío", "El campo del nombre no puede estar vacío.");
                    return;
                }
                if (entryAmountStr.isEmpty()) {
                    showAlert("Campo Vacío", "El campo de cantidad no puede estar vacío.");
                    return;
                }
                if (entryType == null) {
                    showAlert("Selección Requerida", "Debe seleccionar al menos un tipo: Gasto o Ingreso.");
                    return;
                }

                Double entryAmount;
                try {
                    entryAmount = Double.parseDouble(entryAmountStr);
                } catch (NumberFormatException e) {
                    showAlert("Valor Inválido", "Debe introducir un número válido para la cantidad.");
                    return;
                }

                financeData.add(new FinanceEntry(entryName, entryAmount, entryType));
                actualizarGrafico();
                nombre.clear();
                cantidad.clear();
                botones.selectToggle(null);
            });

            calcular.setOnAction(event -> {
                if (meta.getText().isEmpty()) {
                    showAlert("Campo Vacío", "El campo de meta financiera no puede estar vacío.");
                    return;
                }

                try {
                    double metaValue = Double.parseDouble(meta.getText());
                    if (metaValue < 0) {
                        showAlert("Valor Inválido", "La meta financiera debe ser un número positivo.");
                        return;
                    }

                    double totalIngresos = financeData.stream().filter(e -> e.getType().equals("Ingreso")).mapToDouble(FinanceEntry::getAmount).sum();
                    double totalGastos = financeData.stream().filter(e -> e.getType().equals("Gasto")).mapToDouble(FinanceEntry::getAmount).sum();
                    double balance = totalIngresos - totalGastos;

                    if (balance < metaValue) {
                        resultadoMeta.setText("Le faltan " + (metaValue - balance) + " € para llegar a la meta.");
                    } else {
                        resultadoMeta.setText("Meta superada por " + (balance - metaValue) + " €.");
                    }

                } catch (NumberFormatException e) {
                    showAlert("Valor Inválido", "Debe introducir un número válido para la meta financiera.");
                }
            });

            HBox contenidoInferior = new HBox();
            contenidoInferior.setSpacing(20);
            contenidoInferior.getChildren().addAll(table, pieChartContainer);

            root.setTop(formulario);
            root.setCenter(new Separator());
            root.setBottom(contenidoInferior);

            Scene scene = new Scene(root, 840, 700);
            scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
            primaryStage.setScene(scene);
            primaryStage.show();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void actualizarGrafico() {
        // Método para actualizar el gráfico circular cuando se modifica la lista de datos
        // Añade tu lógica de actualización aquí
    }

    private void setBalanceColor(PieChart.Data data, double balance) {
        if (balance >= 0) {
            data.getNode().setStyle("-fx-pie-color: #66BB6A;");
        } else {
            data.getNode().setStyle("-fx-pie-color: #EF5350;");
        }
    }

    private void showAlert(String title, String content) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(content);
        alert.showAndWait();
    }

    public static void main(String[] args) {
        launch(args);
    }
}
