package application;

import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.chart.PieChart;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.*;
import javafx.stage.Modality;
import javafx.stage.Stage;

public class Main extends Application {

    @Override
    public void start(Stage primaryStage) {
        mostrarPantallaLogin(primaryStage);
    }

    // Pantalla de Login
    private void mostrarPantallaLogin(Stage primaryStage) {
        Stage loginStage = crearStageLogin();
        GridPane loginLayout = configurarLoginLayout();
        configurarLoginCamposYBotones(primaryStage, loginStage, loginLayout);

        Scene loginScene = crearEscenaLogin(loginLayout);
        loginStage.setScene(loginScene);
        loginStage.show();
    }

    private Stage crearStageLogin() {
        Stage loginStage = new Stage();
        loginStage.initModality(Modality.APPLICATION_MODAL);
        loginStage.setTitle("Inicio de Sesión");
        return loginStage;
    }

    private GridPane configurarLoginLayout() {
        GridPane loginLayout = new GridPane();
        loginLayout.setAlignment(Pos.CENTER);
        loginLayout.setVgap(10);
        loginLayout.setHgap(10);
        return loginLayout;
    }

    private void configurarLoginCamposYBotones(Stage primaryStage, Stage loginStage, GridPane loginLayout) {
        Label user = new Label("Usuario: ");
        TextField campoUsuario = new TextField();
        campoUsuario.setPromptText("Ingrese su usuario");

        Label pwd = new Label("Contraseña: ");
        PasswordField campoContrasena = new PasswordField();
        campoContrasena.setPromptText("Ingrese su contraseña");

        Button botonIniciarSesion = new Button("Iniciar Sesión");
        botonIniciarSesion.setOnAction(event -> manejarInicioSesion(loginStage, campoUsuario, campoContrasena, primaryStage));

        Button botonSalir = new Button("Salir");
        botonSalir.setOnAction(event -> loginStage.close());

        agregarComponentesLogin(loginLayout, user, campoUsuario, pwd, campoContrasena, botonIniciarSesion, botonSalir);
    }

    private void manejarInicioSesion(Stage loginStage, TextField campoUsuario, PasswordField campoContrasena, Stage primaryStage) {
        String usuario = campoUsuario.getText();
        String contrasena = campoContrasena.getText();

        if (!usuario.isEmpty() && !contrasena.isEmpty()) {
            loginStage.close();
            mostrarPantallaPrincipal(primaryStage);
        } else {
            showAlert("Error", "Debe rellenar todos los campos para iniciar sesión.");
        }
    }

    private void agregarComponentesLogin(GridPane loginLayout, Label user, TextField campoUsuario, Label pwd, PasswordField campoContrasena, Button botonIniciarSesion, Button botonSalir) {
        loginLayout.add(user, 0, 0);
        loginLayout.add(campoUsuario, 1, 0);
        loginLayout.add(pwd, 0, 1);
        loginLayout.add(campoContrasena, 1, 1);
        loginLayout.add(botonIniciarSesion, 0, 2);
        loginLayout.add(botonSalir, 1, 2);
    }

    private Scene crearEscenaLogin(GridPane loginLayout) {
        Scene loginScene = new Scene(loginLayout, 600, 300);
        loginScene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
        return loginScene;
    }

    // Pantalla Principal
    private void mostrarPantallaPrincipal(Stage primaryStage) {
        try {
            BorderPane root = new BorderPane();
            GridPane formulario = crearFormularioFinanzas();

            TableView<FinanceEntry> table = crearTablaFinance();
            ObservableList<FinanceEntry> financeData = FXCollections.observableArrayList();
            table.setItems(financeData);

            VBox pieChartContainer = configurarPieChartContainer();

            configurarAccionesFormulario(formulario, financeData, pieChartContainer);

            HBox contenidoInferior = configurarContenidoInferior(table, pieChartContainer);

            root.setTop(formulario);
            root.setCenter(new Separator());
            root.setBottom(contenidoInferior);

            configurarYMostrarEscenaPrincipal(primaryStage, root);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private GridPane crearFormularioFinanzas() {
        GridPane formulario = new GridPane();
        formulario.setVgap(10);
        formulario.setHgap(10);

        Label titulo = new Label("Calculadora de finanzas");
        TextField nombre = new TextField();
        nombre.setPromptText("Nombre del gasto/ingreso");
        TextField cantidad = new TextField();
        cantidad.setPromptText("Cantidad");
        TextField meta = new TextField();
        meta.setPromptText("Meta financiera");

        ToggleGroup botones = crearGrupoToggleBotones();

        Button calcular = new Button("Calcular");
        Button agregar = new Button("Agregar");
        Label resultadoMeta = new Label();

        agregarComponentesFormulario(formulario, titulo, nombre, cantidad, botones, meta, calcular, agregar, resultadoMeta);

        return formulario;
    }

    private ToggleGroup crearGrupoToggleBotones() {
        ToggleGroup botones = new ToggleGroup();
        RadioButton gasto = new RadioButton("Gasto");
        RadioButton ingreso = new RadioButton("Ingreso");
        gasto.setToggleGroup(botones);
        ingreso.setToggleGroup(botones);
        return botones;
    }

    private void agregarComponentesFormulario(GridPane formulario, Label titulo, TextField nombre, TextField cantidad, ToggleGroup botones, TextField meta, Button calcular, Button agregar, Label resultadoMeta) {
        formulario.add(titulo, 0, 0, 4, 1);
        formulario.add(nombre, 0, 1);
        formulario.add(cantidad, 1, 1);
        formulario.add(new RadioButton("Gasto"), 2, 1);
        formulario.add(new RadioButton("Ingreso"), 3, 1);
        formulario.add(meta, 0, 2, 1, 2);
        formulario.add(calcular, 1, 2);
        formulario.add(agregar, 4, 1);
        formulario.add(resultadoMeta, 0, 4, 2, 3);
    }

    private VBox configurarPieChartContainer() {
        VBox pieChartContainer = new VBox();
        pieChartContainer.setVisible(false);
        return pieChartContainer;
    }

    private HBox configurarContenidoInferior(TableView<FinanceEntry> table, VBox pieChartContainer) {
        HBox contenidoInferior = new HBox();
        contenidoInferior.setSpacing(20);
        contenidoInferior.getChildren().addAll(table, pieChartContainer);
        return contenidoInferior;
    }

    private void configurarAccionesFormulario(GridPane formulario, ObservableList<FinanceEntry> financeData, VBox pieChartContainer) {
        TextField nombre = (TextField) formulario.getChildren().get(1);
        TextField cantidad = (TextField) formulario.getChildren().get(3);
        ToggleGroup botones = (ToggleGroup) formulario.getChildren().get(2);
        TextField meta = (TextField) formulario.getChildren().get(6);
        Label resultadoMeta = (Label) formulario.getChildren().get(8);

        Button calcular = (Button) formulario.getChildren().get(7);
        calcular.setOnAction(event -> calcularMeta(meta, resultadoMeta, financeData));

        Button agregar = (Button) formulario.getChildren().get(5);
        agregar.setOnAction(event -> agregarEntrada(nombre, cantidad, (RadioButton) botones.getSelectedToggle(), (RadioButton) botones.getSelectedToggle(), financeData, pieChartContainer, botones));
    }

    private void configurarYMostrarEscenaPrincipal(Stage primaryStage, BorderPane root) {
        Scene scene = new Scene(root, 840, 700);
        scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    // Métodos de utilidad para acciones en formulario
    private TableView<FinanceEntry> crearTablaFinance() {
        TableView<FinanceEntry> table = new TableView<>();
        table.getColumns().addAll(crearColumna("Nombre", "name", 60), crearColumna("Cantidad", "amount", 60), crearColumna("Tipo", "type", 60), crearColumna("Acción", "deleteButton", 60));
        table.setPrefWidth(250);
        return table;
    }

    private TableColumn<FinanceEntry, ?> crearColumna(String nombre, String propiedad, int ancho) {
        TableColumn<FinanceEntry, String> columna = new TableColumn<>(nombre);
        columna.setCellValueFactory(new PropertyValueFactory<>(propiedad));
        columna.setPrefWidth(ancho);
        columna.setStyle("-fx-alignment: CENTER;");
        return columna;
    }

    private void agregarEntrada(TextField nombre, TextField cantidad, RadioButton gasto, RadioButton ingreso, ObservableList<FinanceEntry> financeData, VBox pieChartContainer, ToggleGroup botones) {
        String entryName = nombre.getText();
        String entryAmountStr = cantidad.getText();
        String entryType = gasto.isSelected() ? "Gasto" : ingreso.isSelected() ? "Ingreso" : null;

        try {
            validarEntrada(entryName, entryAmountStr, entryType);
            Double entryAmount = Double.parseDouble(entryAmountStr);
            Button deleteButton = crearBotonEliminar(entryName, entryAmount, financeData, pieChartContainer);

            financeData.add(new FinanceEntry(entryName, entryAmount, entryType, deleteButton));
            actualizarBalanceYGrafico(financeData, pieChartContainer);

            nombre.clear();
            cantidad.clear();
            botones.selectToggle(null);
        } catch (IllegalArgumentException e) {
            showAlert("Error", e.getMessage());
        }
    }

    private Button crearBotonEliminar(String entryName, double entryAmount, ObservableList<FinanceEntry> financeData, VBox pieChartContainer) {
        Button deleteButton = new Button();
        Image papeleraIcon = new Image(getClass().getResourceAsStream("papelera_icon.png"));
        ImageView papeleraImageView = new ImageView(papeleraIcon);
        papeleraImageView.setFitWidth(20);
        papeleraImageView.setFitHeight(20);
        deleteButton.setGraphic(papeleraImageView);
        deleteButton.setStyle("-fx-background-color: transparent;");
        deleteButton.setOnAction(event -> {
            financeData.removeIf(entry -> entry.getName().equals(entryName) && entry.getAmount() == entryAmount);
            actualizarBalanceYGrafico(financeData, pieChartContainer);
        });
        return deleteButton;
    }

    private void validarEntrada(String nombre, String cantidad, String tipo) {
        if (nombre.isEmpty()) throw new IllegalArgumentException("El campo del nombre no puede estar vacío.");
        if (cantidad.isEmpty()) throw new IllegalArgumentException("El campo de cantidad no puede estar vacío.");
        if (tipo == null) throw new IllegalArgumentException("Debe seleccionar al menos un tipo: Gasto o Ingreso.");
        try {
            Double.parseDouble(cantidad);
        } catch (NumberFormatException e) {
            throw new IllegalArgumentException("Debe introducir un número válido para la cantidad.");
        }
    }

    private void actualizarBalanceYGrafico(ObservableList<FinanceEntry> financeData, VBox pieChartContainer) {
        double totalIngresos = financeData.stream().filter(e -> e.getType().equals("Ingreso")).mapToDouble(FinanceEntry::getAmount).sum();
        double totalGastos = financeData.stream().filter(e -> e.getType().equals("Gasto")).mapToDouble(FinanceEntry::getAmount).sum();
        double balance = totalIngresos - totalGastos;

        actualizarPieChart(pieChartContainer, totalIngresos, totalGastos, balance);
    }

    private void actualizarPieChart(VBox pieChartContainer, double totalIngresos, double totalGastos, double balance) {
        if (!pieChartContainer.isVisible()) {
            PieChart pieChart = crearPieChart(totalIngresos, totalGastos, balance);
            pieChartContainer.getChildren().add(pieChart);
            pieChartContainer.setVisible(true);
        } else {
            PieChart pieChart = (PieChart) pieChartContainer.getChildren().get(0);
            actualizarDatosPieChart(pieChart, totalIngresos, totalGastos, balance);
        }
    }

    private PieChart crearPieChart(double totalIngresos, double totalGastos, double balance) {
        ObservableList<PieChart.Data> pieChartData = FXCollections.observableArrayList(
                new PieChart.Data("Ingresos: " + totalIngresos + " ", totalIngresos),
                new PieChart.Data("Gastos: " + totalGastos + " ", totalGastos),
                new PieChart.Data("Balance: " + balance + " ", Math.abs(balance))
        );
        PieChart pieChart = new PieChart(pieChartData);
        pieChart.setTitle("Distribución Financiera");
        pieChart.setLegendVisible(false);
        setBalanceColor(pieChartData.get(2), balance);
        return pieChart;
    }

    private void actualizarDatosPieChart(PieChart pieChart, double totalIngresos, double totalGastos, double balance) {
        pieChart.getData().set(0, new PieChart.Data("Ingresos: " + totalIngresos + " ", totalIngresos));
        pieChart.getData().set(1, new PieChart.Data("Gastos: " + totalGastos + " ", totalGastos));
        pieChart.getData().set(2, new PieChart.Data("Balance: " + balance + " ", Math.abs(balance)));
        setBalanceColor(pieChart.getData().get(2), balance);
    }

    private void calcularMeta(TextField meta, Label resultadoMeta, ObservableList<FinanceEntry> financeData) {
        try {
            double metaValue = Double.parseDouble(meta.getText());
            double balance = calcularBalance(financeData);

            if (balance < metaValue) {
                resultadoMeta.setText("Le faltan " + (metaValue - balance) + "  para llegar a la meta.");
            } else {
                resultadoMeta.setText("Meta superada por " + (balance - metaValue) + " .");
            }
        } catch (NumberFormatException e) {
            showAlert("Valor Inválido", "Debe introducir un número válido para la meta financiera.");
        }
    }

    private double calcularBalance(ObservableList<FinanceEntry> financeData) {
        double totalIngresos = financeData.stream().filter(e -> e.getType().equals("Ingreso")).mapToDouble(FinanceEntry::getAmount).sum();
        double totalGastos = financeData.stream().filter(e -> e.getType().equals("Gasto")).mapToDouble(FinanceEntry::getAmount).sum();
        return totalIngresos - totalGastos;
    }

    private void setBalanceColor(PieChart.Data data, double balance) {
        if (balance >= 0) {
            data.getNode().setStyle("-fx-pie-color: #66BB6A;");
        } else {
            data.getNode().setStyle("-fx-pie-color: #EF5350;");
        }
    }

    private void showAlert(String title, String content) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(content);
        alert.showAndWait();
    }

    public static void main(String[] args) {
        launch(args);
    }
}
