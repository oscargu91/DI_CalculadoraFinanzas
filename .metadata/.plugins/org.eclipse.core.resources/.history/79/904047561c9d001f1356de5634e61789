package com.carballeira.controller;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.chart.PieChart;
import javafx.scene.control.TextField;
import javafx.scene.layout.VBox;

public class FinanceController {
    private ObservableList<FinanceEntry> financeData;
    private VBox pieChartContainer;

    public FinanceController(VBox pieChartContainer) {
        this.financeData = FXCollections.observableArrayList();
        this.pieChartContainer = pieChartContainer;
    }

    public ObservableList<FinanceEntry> getFinanceData() {
        return financeData;
    }

    public void agregarEntrada(String entryName, String entryAmountStr, String entryType) {
        try {
            validarEntrada(entryName, entryAmountStr, entryType);
            Double entryAmount = Double.parseDouble(entryAmountStr);
            Button deleteButton = crearBotonEliminar(entryName, entryAmount);

            financeData.add(new FinanceEntry(entryName, entryAmount, entryType, deleteButton));
            actualizarBalanceYGrafico();
        } catch (IllegalArgumentException e) {
            showAlert("Error", e.getMessage());
        }
    }

    private Button crearBotonEliminar(String entryName, double entryAmount) {
        Button deleteButton = new Button();
        deleteButton.setText("Eliminar");
        deleteButton.setOnAction(event -> {
            financeData.removeIf(entry -> entry.getName().equals(entryName) && entry.getAmount() == entryAmount);
            actualizarBalanceYGrafico();
        });
        return deleteButton;
    }

    private void validarEntrada(String nombre, String cantidad, String tipo) {
        if (nombre.isEmpty()) throw new IllegalArgumentException("El campo del nombre no puede estar vacío.");
        if (cantidad.isEmpty()) throw new IllegalArgumentException("El campo de cantidad no puede estar vacío.");
        if (tipo == null) throw new IllegalArgumentException("Debe seleccionar al menos un tipo: Gasto o Ingreso.");
        try {
            Double.parseDouble(cantidad);
        } catch (NumberFormatException e) {
            throw new IllegalArgumentException("Debe introducir un número válido para la cantidad.");
        }
    }

    private void actualizarBalanceYGrafico() {
        double totalIngresos = financeData.stream().filter(e -> e.getType().equals("Ingreso")).mapToDouble(FinanceEntry::getAmount).sum();
        double totalGastos = financeData.stream().filter(e -> e.getType().equals("Gasto")).mapToDouble(FinanceEntry::getAmount).sum();
        double balance = totalIngresos - totalGastos;

        if (!pieChartContainer.isVisible()) {
            PieChart pieChart = crearPieChart(totalIngresos, totalGastos, balance);
            pieChartContainer.getChildren().add(pieChart);
            pieChartContainer.setVisible(true);
        } else {
            PieChart pieChart = (PieChart) pieChartContainer.getChildren().get(0);
            actualizarDatosPieChart(pieChart, totalIngresos, totalGastos, balance);
        }
    }

    private PieChart crearPieChart(double totalIngresos, double totalGastos, double balance) {
        ObservableList<PieChart.Data> pieChartData = FXCollections.observableArrayList(
                new PieChart.Data("Ingresos", totalIngresos),
                new PieChart.Data("Gastos", totalGastos),
                new PieChart.Data("Balance", Math.abs(balance))
        );
        PieChart pieChart = new PieChart(pieChartData);
        pieChart.setTitle("Distribución Financiera");
        pieChart.setLegendVisible(false);
        setBalanceColor(pieChartData.get(2), balance);
        return pieChart;
    }

    private void actualizarDatosPieChart(PieChart pieChart, double totalIngresos, double totalGastos, double balance) {
        pieChart.getData().set(0, new PieChart.Data("Ingresos", totalIngresos));
        pieChart.getData().set(1, new PieChart.Data("Gastos", totalGastos));
        pieChart.getData().set(2, new PieChart.Data("Balance", Math.abs(balance)));
        setBalanceColor(pieChart.getData().get(2), balance);
    }

    private void setBalanceColor(PieChart.Data data, double balance) {
        if (balance >= 0) {
            data.getNode().setStyle("-fx-pie-color: #66BB6A;");
        } else {
            data.getNode().setStyle("-fx-pie-color: #EF5350;");
        }
    }

    private void showAlert(String title, String content) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(content);
        alert.showAndWait();
    }

    public void calcularMeta(TextField meta, Label resultadoMeta) {
        try {
            double metaValue = Double.parseDouble(meta.getText());
            double balance = calcularBalance();

            if (balance < metaValue) {
                resultadoMeta.setText("Le faltan " + (metaValue - balance) + " € para llegar a la meta.");
            } else {
                resultadoMeta.setText("Meta superada por " + (balance - metaValue) + " €.");
            }
        } catch (NumberFormatException e) {
            showAlert("Valor Inválido", "Debe introducir un número válido para la meta financiera.");
        }
    }

    private double calcularBalance() {
        double totalIngresos = financeData.stream().filter(e -> e.getType().equals("Ingreso")).mapToDouble(FinanceEntry::getAmount).sum();
        double totalGastos = financeData.stream().filter(e -> e.getType().equals("Gasto")).mapToDouble(FinanceEntry::getAmount).sum();
        return totalIngresos - totalGastos;
    }
}
