package application;

import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.Scene;
import javafx.scene.chart.PieChart;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.*;
import javafx.stage.Stage;

public class Main extends Application {

    @Override
    public void start(Stage primaryStage) {
        try {
            BorderPane root = new BorderPane();

            // Parte superior: formulario
            GridPane formulario = new GridPane();
            formulario.setVgap(10);
            formulario.setHgap(10);

            Label titulo = new Label("Calculadora de finanzas");
            TextField nombre = new TextField();
            nombre.setPromptText("Nombre del gasto/ingreso");
            TextField cantidad = new TextField();
            cantidad.setPromptText("Cantidad");
            TextField meta = new TextField();
            meta.setPromptText("Meta financiera");

            ToggleGroup botones = new ToggleGroup();
            RadioButton gasto = new RadioButton("Gasto");
            RadioButton ingreso = new RadioButton("Ingreso");
            gasto.setToggleGroup(botones);
            ingreso.setToggleGroup(botones);

            Button calcular = new Button("Calcular");
            Button agregar = new Button("Agregar");

            formulario.add(titulo, 0, 0, 4, 1);
            formulario.add(nombre, 0, 1);
            formulario.add(cantidad, 1, 1);
            formulario.add(gasto, 2, 1);
            formulario.add(ingreso, 3, 1);
            formulario.add(meta, 0, 2, 1, 2);
            formulario.add(calcular, 1, 2);
            formulario.add(agregar, 2, 2);

            // Tabla para mostrar los datos
            TableView<FinanceEntry> table = new TableView<>();
            TableColumn<FinanceEntry, String> nameColumn = new TableColumn<>("Nombre");
            nameColumn.setCellValueFactory(new PropertyValueFactory<>("name"));

            TableColumn<FinanceEntry, Double> amountColumn = new TableColumn<>("Cantidad");
            amountColumn.setCellValueFactory(new PropertyValueFactory<>("amount"));

            TableColumn<FinanceEntry, String> typeColumn = new TableColumn<>("Tipo");
            typeColumn.setCellValueFactory(new PropertyValueFactory<>("type"));

            table.getColumns().addAll(nameColumn, amountColumn, typeColumn);

            // Lista observable para la tabla
            ObservableList<FinanceEntry> financeData = FXCollections.observableArrayList();
            table.setItems(financeData);

            // Crear un contenedor para el PieChart
            VBox pieChartContainer = new VBox();
            pieChartContainer.setVisible(false); // Inicialmente invisible

            // Label para mostrar totales
            Label totalsLabel = new Label("Total Ingresos: 0, Total Gastos: 0, Balance: 0");
            totalsLabel.setStyle("-fx-font-weight: bold; -fx-padding: 10;");

            // Añadir funcionalidad al botón "Agregar"
            agregar.setOnAction(event -> {
                String entryName = nombre.getText();
                Double entryAmount = Double.parseDouble(cantidad.getText());
                String entryType = gasto.isSelected() ? "Gasto" : "Ingreso";

                // Agregar la nueva entrada a la lista de finanzas
                financeData.add(new FinanceEntry(entryName, entryAmount, entryType));

                // Calcular los totales de ingresos y gastos
                double totalIngresos = 0;
                double totalGastos = 0;

                for (FinanceEntry entry : financeData) {
                    if (entry.getType().equals("Ingreso")) {
                        totalIngresos += entry.getAmount();
                    } else if (entry.getType().equals("Gasto")) {
                        totalGastos += entry.getAmount();
                    }
                }

                // Calcular el balance
                double balance = totalIngresos - totalGastos;

                // Actualizar el label de totales
                totalsLabel.setText(String.format("Total Ingresos: %.2f, Total Gastos: %.2f, Balance: %.2f",
                        totalIngresos, totalGastos, balance));

                // Crear el PieChart si es necesario
                updatePieChart(pieChartContainer, totalIngresos, totalGastos, balance);

                // Limpiar los campos después de agregar
                nombre.clear();
                cantidad.clear();
                botones.selectToggle(null);
            });

            // Organizar los elementos en un HBox
            HBox contenidoInferior = new HBox();
            contenidoInferior.setSpacing(20);
            contenidoInferior.getChildren().addAll(table, pieChartContainer);

            // Añadir los componentes al BorderPane
            root.setTop(formulario);
            root.setCenter(new Separator());
            root.setBottom(new VBox(contenidoInferior, totalsLabel)); // Añadir totales debajo de la tabla

            // Crear la escena
            Scene scene = new Scene(root, 1000, 800);
            scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
            primaryStage.setScene(scene);
            primaryStage.setTitle("Calculadora de Finanzas"); // Título de la ventana
            primaryStage.show();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Método para crear o actualizar el PieChart
    private void updatePieChart(VBox pieChartContainer, double totalIngresos, double totalGastos, double balance) {
        ObservableList<PieChart.Data> pieChartData = FXCollections.observableArrayList(
                new PieChart.Data("Ingresos: " + totalIngresos + " €", totalIngresos),
                new PieChart.Data("Gastos: " + totalGastos + " €", totalGastos),
                new PieChart.Data("Balance: " + balance + " €", balance)
        );

        // Crear el PieChart
        PieChart pieChart = new PieChart(pieChartData);
        pieChart.setTitle("Distribución Financiera");
        pieChart.setLegendVisible(false);
        setBalanceColor(pieChartData.get(2), balance); // Establecer el color del balance

        pieChartContainer.getChildren().clear(); // Limpiar el contenedor
        pieChartContainer.getChildren().add(pieChart); // Agregar el nuevo PieChart
        pieChartContainer.setVisible(true); // Hacer visible el contenedor del PieChart
    }

    // Método para establecer el color del segmento de balance
    private void setBalanceColor(PieChart.Data data, Double balance) {
        data.getNode().setStyle("-fx-pie-color: red;"); // Color por defecto
        if (balance >= 0) {
            data.getNode().setStyle("-fx-pie-color: green;"); // Color verde si hay balance positivo
        }
    }

    public static void main(String[] args) {
        launch(args);
    }
}
